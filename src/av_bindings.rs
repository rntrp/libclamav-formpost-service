/* automatically generated by rust-bindgen 0.66.1 */

#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

pub const CL_DB_PHISHING: u32 = 2;
pub const CL_DB_PHISHING_URLS: u32 = 8;
pub const CL_DB_PUA: u32 = 16;
pub const CL_DB_CVDNOTMP: u32 = 32;
pub const CL_DB_OFFICIAL: u32 = 64;
pub const CL_DB_PUA_MODE: u32 = 128;
pub const CL_DB_PUA_INCLUDE: u32 = 256;
pub const CL_DB_PUA_EXCLUDE: u32 = 512;
pub const CL_DB_COMPILED: u32 = 1024;
pub const CL_DB_DIRECTORY: u32 = 2048;
pub const CL_DB_OFFICIAL_ONLY: u32 = 4096;
pub const CL_DB_BYTECODE: u32 = 8192;
pub const CL_DB_SIGNED: u32 = 16384;
pub const CL_DB_BYTECODE_UNSIGNED: u32 = 32768;
pub const CL_DB_UNSIGNED: u32 = 65536;
pub const CL_DB_BYTECODE_STATS: u32 = 131072;
pub const CL_DB_ENHANCED: u32 = 262144;
pub const CL_DB_PCRE_STATS: u32 = 524288;
pub const CL_DB_YARA_EXCLUDE: u32 = 1048576;
pub const CL_DB_YARA_ONLY: u32 = 2097152;
pub const CL_DB_STDOPT: u32 = 8202;
pub const CL_SCAN_GENERAL_ALLMATCHES: u32 = 1;
pub const CL_SCAN_GENERAL_COLLECT_METADATA: u32 = 2;
pub const CL_SCAN_GENERAL_HEURISTICS: u32 = 4;
pub const CL_SCAN_GENERAL_HEURISTIC_PRECEDENCE: u32 = 8;
pub const CL_SCAN_GENERAL_UNPRIVILEGED: u32 = 16;
pub const CL_SCAN_PARSE_ARCHIVE: u32 = 1;
pub const CL_SCAN_PARSE_ELF: u32 = 2;
pub const CL_SCAN_PARSE_PDF: u32 = 4;
pub const CL_SCAN_PARSE_SWF: u32 = 8;
pub const CL_SCAN_PARSE_HWP3: u32 = 16;
pub const CL_SCAN_PARSE_XMLDOCS: u32 = 32;
pub const CL_SCAN_PARSE_MAIL: u32 = 64;
pub const CL_SCAN_PARSE_OLE2: u32 = 128;
pub const CL_SCAN_PARSE_HTML: u32 = 256;
pub const CL_SCAN_PARSE_PE: u32 = 512;
pub const CL_SCAN_HEURISTIC_BROKEN: u32 = 2;
pub const CL_SCAN_HEURISTIC_EXCEEDS_MAX: u32 = 4;
pub const CL_SCAN_HEURISTIC_PHISHING_SSL_MISMATCH: u32 = 8;
pub const CL_SCAN_HEURISTIC_PHISHING_CLOAK: u32 = 16;
pub const CL_SCAN_HEURISTIC_MACROS: u32 = 32;
pub const CL_SCAN_HEURISTIC_ENCRYPTED_ARCHIVE: u32 = 64;
pub const CL_SCAN_HEURISTIC_ENCRYPTED_DOC: u32 = 128;
pub const CL_SCAN_HEURISTIC_PARTITION_INTXN: u32 = 256;
pub const CL_SCAN_HEURISTIC_STRUCTURED: u32 = 512;
pub const CL_SCAN_HEURISTIC_STRUCTURED_SSN_NORMAL: u32 = 1024;
pub const CL_SCAN_HEURISTIC_STRUCTURED_SSN_STRIPPED: u32 = 2048;
pub const CL_SCAN_HEURISTIC_STRUCTURED_CC: u32 = 4096;
pub const CL_SCAN_HEURISTIC_BROKEN_MEDIA: u32 = 8192;
pub const CL_SCAN_MAIL_PARTIAL_MESSAGE: u32 = 1;
pub const CL_SCAN_DEV_COLLECT_SHA: u32 = 1;
pub const CL_SCAN_DEV_COLLECT_PERFORMANCE_INFO: u32 = 2;
pub const ENGINE_OPTIONS_NONE: u32 = 0;
pub const ENGINE_OPTIONS_DISABLE_CACHE: u32 = 1;
pub const ENGINE_OPTIONS_FORCE_TO_DISK: u32 = 2;
pub const ENGINE_OPTIONS_DISABLE_PE_STATS: u32 = 4;
pub const ENGINE_OPTIONS_DISABLE_PE_CERTS: u32 = 8;
pub const ENGINE_OPTIONS_PE_DUMPCERTS: u32 = 16;
pub const CL_INIT_DEFAULT: u32 = 0;
pub const cl_error_t_CL_CLEAN: cl_error_t = 0;
pub const cl_error_t_CL_SUCCESS: cl_error_t = 0;
pub const cl_error_t_CL_VIRUS: cl_error_t = 1;
pub const cl_error_t_CL_ENULLARG: cl_error_t = 2;
pub const cl_error_t_CL_EARG: cl_error_t = 3;
pub const cl_error_t_CL_EMALFDB: cl_error_t = 4;
pub const cl_error_t_CL_ECVD: cl_error_t = 5;
pub const cl_error_t_CL_EVERIFY: cl_error_t = 6;
pub const cl_error_t_CL_EUNPACK: cl_error_t = 7;
pub const cl_error_t_CL_EOPEN: cl_error_t = 8;
pub const cl_error_t_CL_ECREAT: cl_error_t = 9;
pub const cl_error_t_CL_EUNLINK: cl_error_t = 10;
pub const cl_error_t_CL_ESTAT: cl_error_t = 11;
pub const cl_error_t_CL_EREAD: cl_error_t = 12;
pub const cl_error_t_CL_ESEEK: cl_error_t = 13;
pub const cl_error_t_CL_EWRITE: cl_error_t = 14;
pub const cl_error_t_CL_EDUP: cl_error_t = 15;
pub const cl_error_t_CL_EACCES: cl_error_t = 16;
pub const cl_error_t_CL_ETMPFILE: cl_error_t = 17;
pub const cl_error_t_CL_ETMPDIR: cl_error_t = 18;
pub const cl_error_t_CL_EMAP: cl_error_t = 19;
pub const cl_error_t_CL_EMEM: cl_error_t = 20;
pub const cl_error_t_CL_ETIMEOUT: cl_error_t = 21;
pub const cl_error_t_CL_BREAK: cl_error_t = 22;
pub const cl_error_t_CL_EMAXREC: cl_error_t = 23;
pub const cl_error_t_CL_EMAXSIZE: cl_error_t = 24;
pub const cl_error_t_CL_EMAXFILES: cl_error_t = 25;
pub const cl_error_t_CL_EFORMAT: cl_error_t = 26;
pub const cl_error_t_CL_EPARSE: cl_error_t = 27;
pub const cl_error_t_CL_EBYTECODE: cl_error_t = 28;
pub const cl_error_t_CL_EBYTECODE_TESTFAIL: cl_error_t = 29;
pub const cl_error_t_CL_ELOCK: cl_error_t = 30;
pub const cl_error_t_CL_EBUSY: cl_error_t = 31;
pub const cl_error_t_CL_ESTATE: cl_error_t = 32;
pub const cl_error_t_CL_VERIFIED: cl_error_t = 33;
pub const cl_error_t_CL_ERROR: cl_error_t = 34;
pub const cl_error_t_CL_ELAST_ERROR: cl_error_t = 35;
pub type cl_error_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_scan_options {
    pub general: u32,
    pub parse: u32,
    pub heuristic: u32,
    pub mail: u32,
    pub dev: u32,
}
#[test]
fn bindgen_test_layout_cl_scan_options() {
    const UNINIT: ::std::mem::MaybeUninit<cl_scan_options> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_scan_options>(),
        20usize,
        concat!("Size of: ", stringify!(cl_scan_options))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_scan_options>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_scan_options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(general)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heuristic) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(heuristic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mail) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(mail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(dev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_engine {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_settings {
    _unused: [u8; 0],
}
extern "C" {
    pub fn cl_debug();
}
extern "C" {
    pub fn cl_init(initoptions: ::std::os::raw::c_uint) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_new() -> *mut cl_engine;
}
pub const cl_engine_field_CL_ENGINE_MAX_SCANSIZE: cl_engine_field = 0;
pub const cl_engine_field_CL_ENGINE_MAX_FILESIZE: cl_engine_field = 1;
pub const cl_engine_field_CL_ENGINE_MAX_RECURSION: cl_engine_field = 2;
pub const cl_engine_field_CL_ENGINE_MAX_FILES: cl_engine_field = 3;
pub const cl_engine_field_CL_ENGINE_MIN_CC_COUNT: cl_engine_field = 4;
pub const cl_engine_field_CL_ENGINE_MIN_SSN_COUNT: cl_engine_field = 5;
pub const cl_engine_field_CL_ENGINE_PUA_CATEGORIES: cl_engine_field = 6;
pub const cl_engine_field_CL_ENGINE_DB_OPTIONS: cl_engine_field = 7;
pub const cl_engine_field_CL_ENGINE_DB_VERSION: cl_engine_field = 8;
pub const cl_engine_field_CL_ENGINE_DB_TIME: cl_engine_field = 9;
pub const cl_engine_field_CL_ENGINE_AC_ONLY: cl_engine_field = 10;
pub const cl_engine_field_CL_ENGINE_AC_MINDEPTH: cl_engine_field = 11;
pub const cl_engine_field_CL_ENGINE_AC_MAXDEPTH: cl_engine_field = 12;
pub const cl_engine_field_CL_ENGINE_TMPDIR: cl_engine_field = 13;
pub const cl_engine_field_CL_ENGINE_KEEPTMP: cl_engine_field = 14;
pub const cl_engine_field_CL_ENGINE_BYTECODE_SECURITY: cl_engine_field = 15;
pub const cl_engine_field_CL_ENGINE_BYTECODE_TIMEOUT: cl_engine_field = 16;
pub const cl_engine_field_CL_ENGINE_BYTECODE_MODE: cl_engine_field = 17;
pub const cl_engine_field_CL_ENGINE_MAX_EMBEDDEDPE: cl_engine_field = 18;
pub const cl_engine_field_CL_ENGINE_MAX_HTMLNORMALIZE: cl_engine_field = 19;
pub const cl_engine_field_CL_ENGINE_MAX_HTMLNOTAGS: cl_engine_field = 20;
pub const cl_engine_field_CL_ENGINE_MAX_SCRIPTNORMALIZE: cl_engine_field = 21;
pub const cl_engine_field_CL_ENGINE_MAX_ZIPTYPERCG: cl_engine_field = 22;
pub const cl_engine_field_CL_ENGINE_FORCETODISK: cl_engine_field = 23;
pub const cl_engine_field_CL_ENGINE_DISABLE_CACHE: cl_engine_field = 24;
pub const cl_engine_field_CL_ENGINE_DISABLE_PE_STATS: cl_engine_field = 25;
pub const cl_engine_field_CL_ENGINE_STATS_TIMEOUT: cl_engine_field = 26;
pub const cl_engine_field_CL_ENGINE_MAX_PARTITIONS: cl_engine_field = 27;
pub const cl_engine_field_CL_ENGINE_MAX_ICONSPE: cl_engine_field = 28;
pub const cl_engine_field_CL_ENGINE_MAX_RECHWP3: cl_engine_field = 29;
pub const cl_engine_field_CL_ENGINE_MAX_SCANTIME: cl_engine_field = 30;
pub const cl_engine_field_CL_ENGINE_PCRE_MATCH_LIMIT: cl_engine_field = 31;
pub const cl_engine_field_CL_ENGINE_PCRE_RECMATCH_LIMIT: cl_engine_field = 32;
pub const cl_engine_field_CL_ENGINE_PCRE_MAX_FILESIZE: cl_engine_field = 33;
pub const cl_engine_field_CL_ENGINE_DISABLE_PE_CERTS: cl_engine_field = 34;
pub const cl_engine_field_CL_ENGINE_PE_DUMPCERTS: cl_engine_field = 35;
pub type cl_engine_field = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_section_hash {
    pub md5: [::std::os::raw::c_uchar; 16usize],
    pub len: usize,
}
#[test]
fn bindgen_test_layout_cli_section_hash() {
    const UNINIT: ::std::mem::MaybeUninit<cli_section_hash> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cli_section_hash>(),
        24usize,
        concat!("Size of: ", stringify!(cli_section_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_section_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_section_hash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_section_hash),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_section_hash),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_stats_sections {
    pub nsections: usize,
    pub sections: *mut cli_section_hash,
}
#[test]
fn bindgen_test_layout_cli_stats_sections() {
    const UNINIT: ::std::mem::MaybeUninit<cli_stats_sections> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cli_stats_sections>(),
        16usize,
        concat!("Size of: ", stringify!(cli_stats_sections))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_stats_sections>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_stats_sections))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsections) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_stats_sections),
            "::",
            stringify!(nsections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_stats_sections),
            "::",
            stringify!(sections)
        )
    );
}
pub type stats_section_t = cli_stats_sections;
extern "C" {
    pub fn cl_engine_set_num(
        engine: *mut cl_engine,
        field: cl_engine_field,
        num: ::std::os::raw::c_longlong,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_get_num(
        engine: *const cl_engine,
        field: cl_engine_field,
        err: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn cl_engine_set_str(
        engine: *mut cl_engine,
        field: cl_engine_field,
        str_: *const ::std::os::raw::c_char,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_get_str(
        engine: *const cl_engine,
        field: cl_engine_field,
        err: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cl_engine_settings_copy(engine: *const cl_engine) -> *mut cl_settings;
}
extern "C" {
    pub fn cl_engine_settings_apply(
        engine: *mut cl_engine,
        settings: *const cl_settings,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_settings_free(settings: *mut cl_settings) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_compile(engine: *mut cl_engine) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_addref(engine: *mut cl_engine) -> cl_error_t;
}
extern "C" {
    pub fn cl_engine_free(engine: *mut cl_engine) -> cl_error_t;
}
pub type clcb_pre_cache = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
extern "C" {
    pub fn cl_engine_set_clcb_pre_cache(engine: *mut cl_engine, callback: clcb_pre_cache);
}
pub type clcb_pre_scan = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
extern "C" {
    pub fn cl_engine_set_clcb_pre_scan(engine: *mut cl_engine, callback: clcb_pre_scan);
}
pub type clcb_post_scan = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        result: ::std::os::raw::c_int,
        virname: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
extern "C" {
    pub fn cl_engine_set_clcb_post_scan(engine: *mut cl_engine, callback: clcb_post_scan);
}
pub type clcb_virus_found = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        virname: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cl_engine_set_clcb_virus_found(engine: *mut cl_engine, callback: clcb_virus_found);
}
pub type clcb_sigload = ::std::option::Option<
    unsafe extern "C" fn(
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        custom: ::std::os::raw::c_uint,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn cl_engine_set_clcb_sigload(
        engine: *mut cl_engine,
        callback: clcb_sigload,
        context: *mut ::std::os::raw::c_void,
    );
}
pub const cl_msg_CL_MSG_INFO_VERBOSE: cl_msg = 32;
pub const cl_msg_CL_MSG_WARN: cl_msg = 64;
pub const cl_msg_CL_MSG_ERROR: cl_msg = 128;
pub type cl_msg = ::std::os::raw::c_uint;
pub type clcb_progress = ::std::option::Option<
    unsafe extern "C" fn(
        total_items: usize,
        now_completed: usize,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
extern "C" {
    pub fn cl_engine_set_clcb_sigload_progress(
        engine: *mut cl_engine,
        callback: clcb_progress,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn cl_engine_set_clcb_engine_compile_progress(
        engine: *mut cl_engine,
        callback: clcb_progress,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn cl_engine_set_clcb_engine_free_progress(
        engine: *mut cl_engine,
        callback: clcb_progress,
        context: *mut ::std::os::raw::c_void,
    );
}
pub type clcb_msg = ::std::option::Option<
    unsafe extern "C" fn(
        severity: cl_msg,
        fullmsg: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cl_set_clcb_msg(callback: clcb_msg);
}
pub type clcb_hash = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        size: ::std::os::raw::c_ulonglong,
        md5: *const ::std::os::raw::c_uchar,
        virname: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cl_engine_set_clcb_hash(engine: *mut cl_engine, callback: clcb_hash);
}
pub type clcb_meta = ::std::option::Option<
    unsafe extern "C" fn(
        container_type: *const ::std::os::raw::c_char,
        fsize_container: ::std::os::raw::c_ulong,
        filename: *const ::std::os::raw::c_char,
        fsize_real: ::std::os::raw::c_ulong,
        is_encrypted: ::std::os::raw::c_int,
        filepos_container: ::std::os::raw::c_uint,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
extern "C" {
    pub fn cl_engine_set_clcb_meta(engine: *mut cl_engine, callback: clcb_meta);
}
pub type clcb_file_props = ::std::option::Option<
    unsafe extern "C" fn(
        j_propstr: *const ::std::os::raw::c_char,
        rc: ::std::os::raw::c_int,
        cbdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn cl_engine_set_clcb_file_props(engine: *mut cl_engine, callback: clcb_file_props);
}
extern "C" {
    pub fn cl_engine_set_stats_set_cbdata(
        engine: *mut cl_engine,
        cbdata: *mut ::std::os::raw::c_void,
    );
}
pub type clcb_stats_add_sample = ::std::option::Option<
    unsafe extern "C" fn(
        virname: *const ::std::os::raw::c_char,
        md5: *const ::std::os::raw::c_uchar,
        size: usize,
        sections: *mut stats_section_t,
        cbdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_add_sample(
        engine: *mut cl_engine,
        callback: clcb_stats_add_sample,
    );
}
pub type clcb_stats_remove_sample = ::std::option::Option<
    unsafe extern "C" fn(
        virname: *const ::std::os::raw::c_char,
        md5: *const ::std::os::raw::c_uchar,
        size: usize,
        cbdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_remove_sample(
        engine: *mut cl_engine,
        callback: clcb_stats_remove_sample,
    );
}
pub type clcb_stats_decrement_count = ::std::option::Option<
    unsafe extern "C" fn(
        virname: *const ::std::os::raw::c_char,
        md5: *const ::std::os::raw::c_uchar,
        size: usize,
        cbdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_decrement_count(
        engine: *mut cl_engine,
        callback: clcb_stats_decrement_count,
    );
}
pub type clcb_stats_submit = ::std::option::Option<
    unsafe extern "C" fn(engine: *mut cl_engine, cbdata: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_submit(engine: *mut cl_engine, callback: clcb_stats_submit);
}
pub type clcb_stats_flush = ::std::option::Option<
    unsafe extern "C" fn(engine: *mut cl_engine, cbdata: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_flush(engine: *mut cl_engine, callback: clcb_stats_flush);
}
pub type clcb_stats_get_num =
    ::std::option::Option<unsafe extern "C" fn(cbdata: *mut ::std::os::raw::c_void) -> usize>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_get_num(engine: *mut cl_engine, callback: clcb_stats_get_num);
}
pub type clcb_stats_get_size =
    ::std::option::Option<unsafe extern "C" fn(cbdata: *mut ::std::os::raw::c_void) -> usize>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_get_size(engine: *mut cl_engine, callback: clcb_stats_get_size);
}
pub type clcb_stats_get_hostid = ::std::option::Option<
    unsafe extern "C" fn(cbdata: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
>;
extern "C" {
    pub fn cl_engine_set_clcb_stats_get_hostid(
        engine: *mut cl_engine,
        callback: clcb_stats_get_hostid,
    );
}
extern "C" {
    pub fn cl_engine_stats_enable(engine: *mut cl_engine);
}
extern "C" {
    pub fn cl_scandesc(
        desc: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        virname: *mut *const ::std::os::raw::c_char,
        scanned: *mut ::std::os::raw::c_ulong,
        engine: *const cl_engine,
        scanoptions: *mut cl_scan_options,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_scandesc_callback(
        desc: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        virname: *mut *const ::std::os::raw::c_char,
        scanned: *mut ::std::os::raw::c_ulong,
        engine: *const cl_engine,
        scanoptions: *mut cl_scan_options,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_scanfile(
        filename: *const ::std::os::raw::c_char,
        virname: *mut *const ::std::os::raw::c_char,
        scanned: *mut ::std::os::raw::c_ulong,
        engine: *const cl_engine,
        scanoptions: *mut cl_scan_options,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_scanfile_callback(
        filename: *const ::std::os::raw::c_char,
        virname: *mut *const ::std::os::raw::c_char,
        scanned: *mut ::std::os::raw::c_ulong,
        engine: *const cl_engine,
        scanoptions: *mut cl_scan_options,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_load(
        path: *const ::std::os::raw::c_char,
        engine: *mut cl_engine,
        signo: *mut ::std::os::raw::c_uint,
        dboptions: ::std::os::raw::c_uint,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cl_retdbdir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cl_retflevel() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cl_retver() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cl_strerror(clerror: cl_error_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_fmap {
    _unused: [u8; 0],
}
pub type cl_fmap_t = cl_fmap;
extern "C" {
    pub fn cl_fmap_open_memory(start: *const ::std::os::raw::c_void, len: usize) -> *mut cl_fmap_t;
}
extern "C" {
    pub fn cl_fmap_close(arg1: *mut cl_fmap_t);
}
extern "C" {
    pub fn cl_scanmap_callback(
        map: *mut cl_fmap_t,
        filename: *const ::std::os::raw::c_char,
        virname: *mut *const ::std::os::raw::c_char,
        scanned: *mut ::std::os::raw::c_ulong,
        engine: *const cl_engine,
        scanoptions: *mut cl_scan_options,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t;
}
